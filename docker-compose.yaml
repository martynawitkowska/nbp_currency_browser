services:
  backend:
    build:
      context: ./backend
      target: development
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - ./envs/backend.env
      - ./envs/postgres.env
    ports:
      - "8000:8000"
    restart: on-failure
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
    networks:
      - postgres_network
      - redis_network

  redis:
    image: redis:alpine
    networks:
      - postgres_network

  celery:
    build:
      context: ./backend
      target: development
    command: sh -c 'sleep 10 && celery -A config worker --loglevel=info'
    volumes:
      - ./backend:/app
    env_file:
      - ./envs/backend.env
      - ./envs/postgres.env
    depends_on:
      - redis
      - postgres
    networks:
      - postgres_network
      - redis_network

  celery_beat:
    build:
      context: ./backend
      target: development
    command: sh -c 'sleep 10 && celery -A config beat --loglevel=info'
    volumes:
      - ./backend:/app
    env_file:
      - ./envs/backend.env
      - ./envs/postgres.env
    depends_on:
      - redis
      - postgres
    networks:
      - postgres_network
      - redis_network

  postgres:
    image: postgres:15.2
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    env_file:
      - envs/postgres.env
    ports:
      - "5432:5432"
    networks:
      - postgres_network

volumes:
  postgres_volume:

networks:
  postgres_network:
    driver: bridge
  redis_network:
    driver: bridge
